const mongoose = require("mongoose");

const transactionSchema = new mongoose.Schema({
  // Unique transaction ID generated by your app (e.g., txn_1746346156821_954 or payout_000000111)
  transactionId: {
    type: String,
    required: true,
    unique: true,
    index: true,
  },
  // SantimPay's transaction ID (e.g., f08336a9-a5a9-4709-8f43-a97ff631c1dc)
  santimPayTxnId: {
    type: String,
    sparse: true,
  },
  // Type of transaction
  type: {
    type: String,
    required: true,
    enum: ["PAYMENT", "PAYOUT"],
  },
  // Merchant ID from SantimPay
  merchantId: {
    type: String,
    required: true,
  },
  // Amount of the transaction (stored as string to preserve decimal precision)
  amount: {
    type: String,
    required: true,
  },
  // Currency of the transaction (e.g., ETB)
  currency: {
    type: String,
    default: "ETB",
  },
  // Status of the transaction
  status: {
    type: String,
    required: true,
    enum: ["INITIATED", "PENDING", "COMPLETED", "FAILED", "CANCELED"],
    default: "INITIATED",
  },
  // Payment-specific fields
  paymentDetails: {
    orderId: { type: String }, // From payment initiation (e.g., postman_123456)
    description: { type: String }, // Description of payment
    phoneNumber: { type: String }, // Customer's phone number
    paymentUrl: { type: String }, // Generated payment URL
    totalAmount: { type: String }, // Total amount including commission
    commissionAmount: { type: String }, // Commission charged by SantimPay
  },
  // Payout-specific fields
  payoutDetails: {
    paymentReason: { type: String }, // Reason for payout (e.g., ATS-Bingo)
    phoneNumber: { type: String }, // Receiver's phone number
    paymentMethod: { type: String }, // e.g., Telebirr
    notifyUrl: { type: String }, // Webhook URL for payout
    receiverAccountNumber: { type: String }, // Optional account number
  },
  // Webhook data received from SantimPay
  webhookData: [
    {
      thirdPartyId: { type: String },
      status: { type: String },
      amount: { type: String },
      paymentMethod: { type: String },
      timestamp: { type: Date, default: Date.now },
      rawData: { type: Object }, // Store raw webhook payload for debugging
    },
  ],
  // Additional metadata
  createdAt: {
    type: Date,
    default: Date.now,
  },
  updatedAt: {
    type: Date,
    default: Date.now,
  },
});

// Update updatedAt timestamp before saving
transactionSchema.pre("save", function (next) {
  this.updatedAt = Date.now();
  next();
});

module.exports = mongoose.model("Transaction", transactionSchema);
